Final Project and Presentation
CPSC-411A
Assignment Prompts as Living Documents
Assignment prompts are to be considered Living Documents. You should check back frequently for
updates and clarifications, especially just before submission deadlines.

If anything in this prompt is unclear, contradictory, or questionable, please notify the professor
immediately so a clarification can be given to you, and this document possibly updated. Otherwise, you
may be responsible for incorrectly guessing the instructions.

About
This assignment prompt outlines the requirements for our semester final project. Read this document
carefully so you do not lose points due to small mistakes or oversights, as we won’t have time or Office
Hours after the semester ends to discuss corrections.

Groups
You may work in groups of 5 to 6 members. In other words, the minimum number of members in a
group is 5 and the maximum members is 6. They will be assigned randomly by the professor.

All group members are responsible for letting the instructor know about their group changes well
before the due date.

Group Cautions
GitHub Groups
I will provide a link for you to join GitHub. One person of each group will create the group. The rest of
you, please do not join a wrong group.

Equal Contribution
All group members are expected to contribute and participate roughly equally. This will be tracked via
code commits. Your project’s git history will be audited, and a report will be generated of each group
member’s contributions down to the individual line. Any group member that contributes very little may
be subject to a loss of their grade, or heavy penalties. It is not an excuse that you cannot commit from
your own machine; All group members are expected to push code from their own machines with proper
git config configurations.

That said, you will be individually graded for your contribution to the project. Please keep close track
of what you did.

Group Communication and Responsibility
If any group member “drops the ball” by failing to contribute adequately, all group members are still
responsible for the final state of the project. Group members may notify the professor if a group
member does not contribute, so their grade may be adjusted or removed. All group members are
expected to be proactive in ensuring intra-group issues are addressed in a timely manner. All group
members are responsible for the final state of the project. This also applies to plagiarism that may be
detected through the use of automated algorithms.

Murphy’s Law
Your group should prepare for the wrath of Murphy’s Law as a feature for your grade. Have a second
laptop ready to give your presentation and practice your presentation with both. Don’t forget to test the
second laptop before the presentation.

Try recording a video as you practice your presentation just in case something goes wrong, and you
don’t want to lose points for failing to demonstrate a feature. If something does go terribly and
uncontrollably wrong, a video clip of you demonstrating that feature will suffice.

In other words, plan for the possibility that anything that can go wrong, will probably go wrong. Your
plan should include mitigations.

Basic Components
The Final Project will be done in groups and have two major components:

Project deliverables.
Presentation of the project during a class meeting.
Project Deliverables
You will create a project that covers as many as the topics presented in class as possible. You are free to
use your imagination and creativity by generating the most fun and/or useful and/or unique project your
heart desires.

Features not fully implemented/working may not receive points.

You must deliver your project (and all other deliverables) via GitHub on or before the due date. The
delivery must be made to the appropriate GitHub repository, allocated to you by clicking our usual
“GitHub Invitation” link found in the Canvas entry for this assignment.

Your project must compile/run/work with no additional required steps than asking the IDE to compile
and run. No code pushed beyond the due date will be considered; Your repository will be “rolled back”
to the last commit before the due date and executed there. A zip file of your project downloaded to the
computer of your professor on the due date must be used for the presentation.

You should double and triple check that your project has made it to GitHub in a valid state by
performing a fresh clone to a different folder (or better: A different computer) and checking that it
compiles and runs correctly with no modifications.

If your repository contains more than one branch, only the master or main branch will be graded.
Repositories that contain both a master and main branch, will only be graded based on the master
branch.

Project Presentation
You will present your project to the class at the end of the semester. You will not make a slideshow but
will perform a “Live Demo” of your functional project on your own laptop using the zip file of your
own project as of the due date provided to you by your professor. Of course, this means at least one
member in the group needs to bring a laptop capable of performing the presentation via HDMI cable or
one of the adapters. Please make sure that one of the adapters can be used with your laptop. Be
prepared to show your code that support the functionalities.

Schedule and Earning Credit
You must give your presentation on the scheduled day to receive credit. Reschedules will only be
allowed if there is ample room in the schedule. Reschedules made within 1 week of the originally
scheduled presentation date without a provable emergency will incur penalties.

You must be ready to give your presentation at the beginning of our class meeting on the day of the
presentation. Your group may be called upon to present earlier than scheduled and may lose points if
you are still unprepared by the beginning of class.

Any functionality not presented will not earn points. This includes points for deliverables.

Basic Presentation Flow
At the beginning of your demonstration, announce your group name, then each group member’s name.
Confirm the professor has understood and noted this information.

Then, perform a fresh unzip of your project provided to you by your professor to a brand new folder in
front of the class. Let the class know the name of your app and briefly explain the general idea,
inspiration, purpose, usefulness, etc.

Then, you will iterate through each of the requirements listed, and do the following for each:

Announce the requirement you are about to demonstrate.
If you are a graduate student presenting a Grad Requirement, notify the instructor that this is
a Grad Requirement and repeat your name so the instructor can credit you.
Demonstrate how to navigate to the requirement within your app.
Demonstrate the part of your app that fulfills the requirement while explaining how/why it
satisfies the requirement.
Quickly show some of the code that supports the requirement. Do not explain the code in detail,
but quickly explain the general idea.
Finally, you may summarize what makes your app special (creativity, robustness, usefulness,
uniqueness, etc.) and show off any other fun features.

Presentation Duration
Your presentation does not need to satisfy a minimum duration of time to earn full credit. You will earn
the same credit whether you finish in a few minutes, or the maximum time allotted to your group. The
most important thing to do is prove your app meets the requirements, as explained above.

Each presentation is allotted a maximum time duration of 15 minutes. Feel free to finish significantly
early if you are able to prove/demo your requirements faster. The professor will try to give you a
warning when you have less than 5 minutes remaining, but this is not guaranteed.

When your time slot has finished, your presentation will be cut short regardless of the number of
requirements you have demonstrated, and the non-demonstrated requirements will not earn credit. As
such, you should rehearse your presentation until you can finish it significantly faster than your allotted
time.

Group Member Speaking Time and Technical Difficulties
You do not need to split the presentation equally among all group members, but each group member
should present at least one requirement.

Needless to say, you should practice your presentation several times, so you do not lose points due to
technical difficulties or being cut off when your allotted time runs out.

Requirements
The requirements below should each appear within your app.

Note: The following requirements should be considered incomplete
until the last 2 weeks of the semester. More requirements will be
added as the semester progresses, so check back regularly.
The most likely outcome is that the final requirements will closely
mirror one item from each week of our course outline, so start there
if you’d like to get a head start.
There is no penalty for doing more than the requirements and may
actually improve your grade.
Extra credit requirements are considered extra challenges for self-research.

Requirement Description
Callbacks The user should be able to click at least one View
that causes a callback function to be called, which
produces an apparent result back to the user.
Logging Important events should be logged to the Logcat
area with varying levels and unique tags.
Requirement Description
Layouts Your app must use the ConstraintLayout at least
once with multiple internal Views.

Elsewhere in your app, you must use another
Layout container type, such as LinearLayout
(horizontal or vertical), or TableLayout
Resources There should be at least two image resources
utilized in some way by the application, in an
interactive way.

Resources (extra credit) Earn extra credit by having your app embed a
playable video or audio file. You may implement
this using resources OR asset file streams.

Resource qualifiers The app should make use of resource qualifiers to
dynamically choose alternative resources based on
device configuration. There should be at least
three dynamically chosen resources.

The first dynamic resource should be the strings
file that allows for multiple translations of the
app; The app should support at least 3 translations.
The second dynamic resource should be a layout
file that shows the user a different layout based on
orientation (or alternatively the screen size).
The third (and beyond, if desired) resources may
be anything of your choosing.
Requirement Description
Persistence The app should allow the user to generate data in
some way. The data should survive device
rotations by utilizing a ViewModel.

The app should also have the ability to save files.
At least one file should be saved to the device via
user interaction, survive across app exit, and
loaded+viewable on the next launch.
The app should save at least two user preferences
by utilizing the DataStore package (or
alternatively, the FireStore package). Preferences
should persist across app exit.
App allows user to enter data that can be saved to
a local SQLite database and fetched later. Data
survives app exit. User is able to save/fetch
multiple entries for the same type of data (i.e.,
multiple rows in a database table). This
requirement may be tweaked slightly the week
before presentations, if needed.
User Interface The app should contain at least two fragments
somewhere. Each fragment should be used in at
least two places in the app. At least one layout
should contain multiple fragments.

Example: Two different layouts (dynamically
chosen per above requirements) that utilize the
same two fragments (reuse), with one layout
utilizing an additional third fragment.
The use interface must contain at least one List
with RecyclerView.
The user interface should be user-friendly,
functional, optimal and polished on devices of
various sizes and in both orientation
(portrait/landscape).
Requirement Description
RESTful Interactivity The app should communicate with a RESTful API
server using Retrofit. The app should pull some
sort of data from the remote API using an HTTP
GET request and render it somewhere in the local
app. The app should also allow the local user to
provide some sort of data that will be sent to the
remote API using an HTTP POST request.
When the user exits and relaunches the app, data
previously sent to the remote API should be
fetched from the remote API and shown to the
user. The previously sent data should not be saved
using local persistence, but fetched from the live
server instead, to prove the app is “cloudified” in
some way.
You may choose to use an existing API or create
one yourself, as long as your app is able to both
create data on the remote server and fetch those
records.
Additional Requirements for Graduate Students
Each graduate student will need to complete an additional requirement to satisfy this assignment (Grad
Requirement). Each graduate student must implement an individual requirement on their own; Two
graduate students cannot receive credit for the same requirement. For example, if a project group
contains 3 undergrad students and 2 graduate students, the project will need to have 2 Grad
Requirements, with both grad students each presenting the requirement for which they would like to
receive credit.

Grad students are expected to do their respective requirement on their own (research, learning,
debugging, implementation, pushing code, etc.).

You may choose the Grad Requirement you implement but check with your professor beforehand to
make sure it will qualify for credit (i.e., that it is sufficiently challenging to implement). Topics covered
during our “Live Demo” lectures will not qualify. You might want to browse the second half of our
textbook for topics not covered by any “Live Demo” lectures that seem sufficiently challenging. You
may also choose topics not covered in our textbook, like OAuth authentication, other types of data
storage, other types of network access (i.e., non-RESTful servers), other features of an Android device
(e.g., Bluetooth connectivity), and so forth. You are allowed to use a physical Android device to present
features that wouldn’t work with the emulator.

Each graduate student should present their own Grad Requirement. Before presenting the requirement,
notify the instructor that you are about to present your graduate requirement, and repeat your name so
the instructor knows you should receive credit for the requirement.

